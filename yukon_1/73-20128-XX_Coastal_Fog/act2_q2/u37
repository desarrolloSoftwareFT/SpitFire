!!!!    6    0    1 1626168457  Vddd6                                         
!*** All contents copyright 2008 Cisco Systems Inc.
!*** All rights reserved.
!*** No portion of this software may be used or reproduced in any form, or
!*** by any means, without prior written permission from Cisco Systems, Inc.
!
! Part Name:              R5H30211
! Alias:                  AT90SC12818RCU,N2G-QUACK
! Part Type:              VLSI
! Description:            Quack Security Chip, I2C Bus Interface
! Manufacturer:           Renesas Technology, Atmel
! Package Style:          20 pin QFN (21 pins if including EPAD)
! Created:                Jul 27, 2007
! Updated:                Jan 04, 2008, Added Cisco part number.
! Programmer:             sama
! Tester:                 HP3070
! Processor:              VPU
! Vector Format:          VCL
! Fault coverage:         100%. Pin test.
! Constraints:
! Cisco Part #:           15-10778-01,15-10898-01,15-13416-04

test digital

sequential
default device "u37"

vector cycle  12.0u   !@!11.4u - 11.6u !@!5u
receive delay 11.9u   !@!11.4u !@!4.9u

set terminators to on

assign VCC to pins *
assign GND to pins *
assign E_PAD to pins *
assign CLK to pins * !pins 20 connected to ground in design
assign ADDR to pins *,*,* !A2,A1,A0 ! Testing the device as per hardware design
assign SDA to pins 13
assign SCL to pins 12
assign RSTB to pins 4

inputs RSTB,CLK,SCL,ADDR
bidirectional SDA
power VCC,GND,E_PAD

disable SDA with RSTB to "0"

capture  SDA

family LVT

set ref on groups SDA to rh 2.0, rl 0.8

set load on groups SDA to pull up

!##############################################################################

vector INIT1
 drive SDA
 set RSTB to "0"
 set ADDR to "xxx"
 set SDA  to "1"
 set SCL  to "1"
end vector

vector KEEP1
 receive SDA
 set RSTB to "k"
 set ADDR to "kkk"
 set SDA  to "x"
 set SCL  to "k"
end vector

vector KEEP2
 drive SDA
 set RSTB to "k"
 set ADDR to "kkk"
 set SDA  to "k"
 set SCL  to "k"
end vector

vector RSTB_0
 initialize to KEEP1
 set RSTB   to "0"
end vector

vector RSTB_1
 initialize to KEEP1
 set RSTB   to "1"
end vector

vector A_000
 initialize to KEEP1
 set ADDR   to "000"
end vector

vector A_001
 initialize to KEEP1
 set ADDR   to "001"
end vector

vector A_010
 initialize to KEEP1
 set ADDR   to "010"
end vector

vector A_011
 initialize to KEEP1
 set ADDR   to "011"
end vector

vector A_100
 initialize to KEEP1
 set ADDR   to "100"
end vector

vector A_101
 initialize to KEEP1
 set ADDR   to "101"
end vector

vector A_110
 initialize to KEEP1
 set ADDR   to "110"
end vector

vector A_111
 initialize to KEEP1
 set ADDR   to "111"
end vector

vector SK_10
 initialize to KEEP1
 set SCL    to "0"
end vector

vector SK_11
 initialize to KEEP1
 set SCL    to "1"
end vector

vector SK_20
 initialize to KEEP2
 set SCL    to "0"
end vector

vector SK_21
 initialize to KEEP2
 set SCL    to "1"
end vector

vector R_X
 initialize to KEEP1
 set SDA    to "x"
end vector

vector R_0
 initialize to KEEP1
 set SDA    to "0"
end vector

vector R_1
 initialize to KEEP1
 set SDA    to "1"
end vector

vector D_0
 initialize to KEEP2
 set SDA    to "0"
end vector

vector D_1
 initialize to KEEP2
 set SDA    to "1"
end vector

! ****************************************************************************

sub RST_IC
 repeat 40 times
  execute RSTB_0
 end repeat
 repeat  200000 times !@!1s
  execute RSTB_1
 end repeat
end sub

sub IDLE1
 repeat 20 times
  execute KEEP1
 end repeat
end sub

sub IDLE2
 repeat 20 times
  execute KEEP2
 end repeat
end sub

sub STRT
 execute D_1
 execute D_1
 execute SK_21
 execute SK_21
 execute D_0
 execute D_0
 execute SK_20
 execute SK_20
end sub

sub STOP
 execute SK_20
 execute SK_20
 execute D_0
 execute D_0
 execute SK_21
 execute SK_21
 execute D_1
 execute D_1
 repeat 20 times
  execute KEEP2
 end repeat
end sub

sub WR(D7,D6,D5,D4,D3,D2,D1,D0)
 execute D7
 execute SK_21
 execute SK_20
 execute D6
 execute SK_21
 execute SK_20
 execute D5
 execute SK_21
 execute SK_20
 execute D4
 execute SK_21
 execute SK_20
 execute D3
 execute SK_21
 execute SK_20
 execute D2
 execute SK_21
 execute SK_20
 execute D1
 execute SK_21
 execute SK_20
 execute D0
 execute SK_21
 execute SK_10
 execute R_0    ! Acknowledge bit
 execute SK_11
 execute SK_10
!call IDLE1
end sub

sub RD(D7,D6,D5,D4,D3,D2,D1,D0)
 execute SK_11
 execute D7
 execute SK_10
 execute SK_11
 execute D6
 execute SK_10
 execute SK_11
 execute D5
 execute SK_10
 execute SK_11
 execute D4
 execute SK_10
 execute SK_11
 execute D3
 execute SK_10
 execute SK_11
 execute D2
 execute SK_10
 execute SK_11
 execute D1
 execute SK_10
 execute SK_11
 execute D0
 execute SK_10
 execute D_0   ! Acknowledge bit !@!Thana - continues Read
 execute SK_21
 execute SK_20
 execute SK_10
 call IDLE1
end sub

sub RD_1(D7,D6,D5,D4,D3,D2,D1,D0)
 execute SK_11
 execute D7
 execute SK_10
 execute SK_11
 execute D6
 execute SK_10
 execute SK_11
 execute D5
 execute SK_10
 execute SK_11
 execute D4
 execute SK_10
 execute SK_11
 execute D3
 execute SK_10
 execute SK_11
 execute D2
 execute SK_10
 execute SK_11
 execute D1
 execute SK_10
 execute SK_11
 execute D0
 execute SK_10
 execute D_1   !NACK bit !@!Thana - stop Read
 execute SK_21           !@!Thana 060916
 execute SK_20
 execute SK_10
 call IDLE1
end sub

sub IC_ADDR
 call STRT
 execute D_1    ! b1110XXX, XXX = A2,A1,A0, -
 execute SK_21
 execute SK_20
 execute D_1
 execute SK_21
 execute SK_20
 execute D_1
 execute SK_21
 execute SK_20
 execute D_0
 execute SK_21
 execute SK_20
 execute D_0            !A2
 execute SK_21
 execute SK_20
 execute D_0            !A1
 execute SK_21
 execute SK_20
 execute D_0            !A0
 execute SK_21
 execute SK_20
end sub

sub WR_COMMAND
 call IC_ADDR
 execute D_0    ! Write operation
 execute SK_21
 execute SK_10
 execute R_0    ! Acknowledge bit
 execute SK_11
 execute SK_10
!call IDLE1
end sub

sub RD_COMMAND
 call IC_ADDR
 execute D_1    ! Read operation
 execute SK_21
 execute SK_10  !@!Thana         060916
 execute R_0    !Acknowledge bit 060916
 execute SK_11  !@!Thana         060916
 execute SK_10
!call IDLE1
end sub

!@! Thana
sub RD_COMMAND1
 call IC_ADDR
 execute D_1    ! Read operation
 execute SK_21
 execute SK_20
 execute D_0    ! Acknowledge bit
 execute SK_21
 execute SK_10
!call IDLE1
end sub
!@! Thana

sub START_READ
 call STOP
 call RD_COMMAND
 call RD_1(R_0,R_0,R_0,R_0,R_0,R_0,R_1,R_1)
 call STOP
end sub

sub START_READ_0
 call STOP
 call RD_COMMAND
 call RD_1(R_0,R_0,R_0,R_0,R_0,R_0,R_0,R_0)
 call STOP
end sub

sub SYNC1
 repeat 8 times
  call STRT
  wait 20m
  call STOP
  wait 20m
 end repeat
end sub

sub SCC_CMD_START
 call WR_COMMAND
 call WR(D_0,D_0,D_0,D_0, D_0,D_0,D_0,D_1)  ! $01
end sub

sub SCC_CMD_CONT
 call WR_COMMAND
 call WR(D_0,D_0,D_0,D_0, D_0,D_0,D_1,D_0)  ! $02
end sub

sub SCC_CMD_END
 call WR_COMMAND
 call WR(D_0,D_0,D_0,D_0, D_0,D_0,D_1,D_1)  ! $03
end sub

sub DUMMY_WR_BYTE
 call WR(D_0,D_0,D_0,D_0, D_0,D_0,D_0,D_0)
end sub

sub RD_BYTE_COUNT_1
 call RD_COMMAND
 call RD(R_0,R_0,R_0,R_0, R_0,R_0,R_0,R_1)  ! $01
end sub

sub RD_BYTE_COUNT_2
 call RD_COMMAND
 call RD(R_0,R_0,R_0,R_0, R_0,R_0,R_1,R_0)  ! $02
end sub

sub RD_BYTE_COUNT_2_1
 call RD_COMMAND
 call RD(R_1,R_1,R_0,R_0, R_0,R_0,R_1,R_1)  ! $02
end sub

sub RD_BYTE_COUNT_2_1_T
 call RD_COMMAND
 call RD(R_0,R_0,R_0,R_0, R_0,R_0,R_0,R_0)  ! $00
end sub

sub RD_BYTE_COUNT_2_2
 call RD_COMMAND
 call RD(R_0,R_0,R_0,R_1, R_1,R_0,R_1,R_1)  ! $1B
end sub

sub RD_BYTE_COUNT_2_2_T
 call RD_COMMAND
 call RD(R_0,R_0,R_0,R_0, R_0,R_0,R_1,R_0)  ! $02
end sub

sub RD_BYTE_COUNT_2_4
 call RD_COMMAND
 call RD(R_0,R_1,R_0,R_1, R_0,R_0,R_1,R_1)  ! 53
end sub

sub RD_BYTE_COUNT_2_4_T
 call RD_COMMAND
 call RD(R_0,R_0,R_0,R_0, R_0,R_0,R_1,R_0)  ! 02
end sub

sub RD_BYTE_COUNT_2_T0
 call RD_COMMAND1
 call RD(R_0,R_0,R_0,R_0, R_0,R_0,R_1,R_0)  ! 02
end sub

sub RD_BYTE_COUNT_20
 call RD_COMMAND
 call RD(R_0,R_0,R_1,R_0, R_0,R_0,R_0,R_0)  ! 20
end sub

sub RD_BYTE_COUNT_00
 call RD_COMMAND
 call RD(R_0,R_0,R_0,R_0, R_0,R_0,R_0,R_0)  ! 00
end sub

sub RD_BYTE_COUNT_2_T1
 call RD_COMMAND1
end sub

sub RD_BYTE_COUNT_2_5
 call RD_COMMAND
 call RD(R_0,R_0,R_1,R_0, R_0,R_0,R_0,R_0)  ! 20
end sub

sub RD_BYTE_COUNT_2_5_T
 call RD_COMMAND1                                       !@!Thana 060716
!@! call RD_1(R_0,R_0,R_1,R_0, R_1,R_1,R_0,R_0)  ! 2C   !@!Thana 060716
end sub

sub RD_BYTE_COUNT_3
 call RD_COMMAND
 call RD(R_0,R_0,R_0,R_0, R_0,R_0,R_1,R_1)  ! $03
! call RD(R_0,R_0,R_0,R_0, R_0,R_0,R_1,R_1)  ! $03
end sub

sub RD_BYTE_COUNT_13
 call RD_COMMAND
 call RD(R_0,R_0,R_0,R_1, R_0,R_0,R_1,R_1)  ! $13
end sub

sub RD_BYTE_COUNT_3_T
 call RD_COMMAND
 call RD(R_0,R_0,R_0,R_0, R_0,R_0,R_0,R_0)  ! $00
end sub

sub RD_BYTE_COUNT_3_4
  call RD_COMMAND1
end sub

sub RD_BYTE_COUNT_3_1
 call RD_COMMAND
 call RD(R_0,R_0,R_0,R_0, R_0,R_0,R_1,R_1)  ! $03
! call RD(R_0,R_0,R_0,R_0, R_0,R_0,R_1,R_1)  ! $03
end sub

sub RD_BYTE_COUNT_3_2
 call RD_COMMAND
 call RD(R_0,R_0,R_0,R_0, R_0,R_0,R_1,R_1)  ! $03
! call RD(R_0,R_0,R_0,R_0, R_0,R_0,R_1,R_1)  ! $03
end sub

sub RD_BYTE_COUNT_6
 call RD_COMMAND
 call RD(R_0,R_0,R_0,R_0, R_0,R_1,R_1,R_0)  ! $03
! call RD(R_0,R_0,R_0,R_0, R_0,R_0,R_1,R_1)  ! $03
end sub

sub RD_BYTE_COUNT_3_5
 call RD_COMMAND
 call RD(R_0,R_1,R_1,R_0, R_0,R_0,R_1,R_1)  ! 63
end sub

sub RD_BYTE_COUNT_3_6
 call RD_COMMAND
 call RD(R_0,R_1,R_1,R_0, R_1,R_1,R_0,R_1)  ! 6D
end sub

sub RD_BYTE_COUNT_3_6_T
 call RD_COMMAND
 call RD(R_0,R_1,R_1,R_0, R_0,R_1,R_0,R_1)  ! 65
end sub

sub RD_BYTE_COUNT_3_7
 call RD_COMMAND
 call RD(R_0,R_0,R_0,R_0, R_0,R_0,R_0,R_0)  ! 00
end sub

sub DUMMY_RD_BYTE
 call RD(R_X,R_X,R_X,R_X, R_X,R_X,R_X,R_X)
end sub

sub FLOW_CONTROL_GET_NEXT
 call SCC_CMD_START
 call WR(D_0,D_1,D_1,D_0, D_0,D_1,D_0,D_0)  ! 64, Get next SCC message
 call WR(D_0,D_0,D_0,D_0, D_0,D_0,D_0,D_0)  ! 00, Version
 call WR(D_0,D_0,D_0,D_0, D_0,D_0,D_0,D_0)  ! 00, Length
 call STOP
 call SCC_CMD_CONT
 call WR(D_1,D_0,D_0,D_1, D_1,D_0,D_1,D_1)  ! 9B, CRC
 call DUMMY_WR_BYTE
 call DUMMY_WR_BYTE
 call STOP
 call SCC_CMD_END
 call DUMMY_WR_BYTE
 call DUMMY_WR_BYTE
 call DUMMY_WR_BYTE
 call STOP
 wait 5m
end sub

! ***************************** Newly Add ************************************

sub START_READ_3
 call RD_COMMAND
 call RD_1(R_0,R_0,R_0,R_0,R_0,R_0,R_1,R_1)
 call STOP
end sub

sub START_READ_3_T
 call RD_COMMAND
 call RD_1(R_0,R_0,R_0,R_0,R_0,R_0,R_1,R_1)
 call STOP
end sub

sub RD_BYTE_COUNT_2_3
 call RD_COMMAND
 call RD(R_0,R_0,R_0,R_0, R_0,R_0,R_0,R_0)  ! 00
end sub

sub RD_BYTE_COUNT_2_3_T
 call RD_COMMAND
 call RD(R_0,R_0,R_0,R_0, R_0,R_0,R_1,R_0)  ! 02
end sub

sub RD_BYTE_COUNT_3_5_T
 call RD_COMMAND
 call RD(R_0,R_1,R_1,R_1, R_0,R_0,R_1,R_1)  ! 73
end sub

! *****************************  Thana  **************************************

! ***************************** Reset IC *************************************

unit "Reset Quack IC"
 execute INIT1
 execute A_000
 call RST_IC
end unit

! **************************** Read SCC ID ***********************************

unit "Get SCC ID Command"
 call SCC_CMD_START
 call WR(D_0,D_1,D_1,D_0, D_0,D_0,D_0,D_1)  ! 61, GET_SCC_ID
 call WR(D_0,D_0,D_0,D_0, D_0,D_0,D_0,D_0)  ! 00, Version
 call WR(D_0,D_0,D_0,D_0, D_0,D_0,D_0,D_0)  ! 00, Length
 call STOP
 call SCC_CMD_END
 call STOP

! wait 40m

 call RD_BYTE_COUNT_3_2                     ! Read ID
 call RD(R_0,R_0,R_0,R_1, R_0,R_0,R_0,R_1)  ! ID =11
 call RD(R_0,R_0,R_0,R_0, R_0,R_0,R_0,R_0)  ! 00
 call RD_1(R_0,R_0,R_0,R_0, R_0,R_1,R_0,R_0)  ! 04
 call STOP
 call START_READ
 call RD_BYTE_COUNT_6                             !@!Thana 06102016,RS
 call RD(R_0,R_0,R_0,R_0, R_0,R_1,R_1,R_0) !06    !@!Thana 06102016,RS
 call RD(R_0,R_0,R_0,R_1, R_1,R_0,R_1,R_1) !1B    !@!Thana 06102016,RS
 call RD_1(R_0,R_0,R_0,R_0, R_0,R_0,R_1,R_0) !02  !@!Thana 060716
 call STOP
 call RD_BYTE_COUNT_2_1_T                         !@!Thana 060716
 call RD(R_1,R_1,R_0,R_0, R_0,R_0,R_1,R_1) !C3    !@!Thana 06102016,RS
 call RD(R_0,R_0,R_0,R_0,R_0,R_0,R_0,R_0) !AA CRC    !ben
 call RD_1(R_0,R_0,R_0,R_0,R_0,R_0,R_0,R_0) !00        !HV!
 call STOP
end unit

