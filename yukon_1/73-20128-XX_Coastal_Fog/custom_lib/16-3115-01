!!!!    6    0    1 1607343622  V508a                                         
! Xicor X24c02
! 256 x 8-bit
! CMOS EEPROM with I2C-Bus Interface
! Rev 920731 JSS

sequential

vector cycle  10u
receive delay  9u

warning " Pinouts are for the 8 pin SOIC"

assign VCC to pins 8
assign GRD to pins 4

assign Address to pins 3,2,1
assign CLK to pins 6
assign Data to pins 5
assign Write_Bar to pins 7

family LVT

power  VCC,GRD

inputs CLK, ADDRESS, Write_Bar

bidirectional DATA
disable Data with Address to "000"
!*******************************************************************************
!*******************************************************************************
vector Keep
   receive Data
   set Address to "kkk"
   set CLK to "k"
   set Write_Bar to "k"
   set Data to "x"
end vector

vector Keep_drv
   drive DATA
   set Address to "kkk"
   set CLK to "k"
   set DATA to "k"
   set Write_Bar to "k"
end vector

vector Init
   drive DATA
   set Address to "100"                  ! MUST MATCH ADDRESS ON CIRCUIT PACK
   set CLK to "1"
   set DATA to "1"
   set Write_Bar to "k"
end vector

vector Address_000
   set Address to "000"
end vector

vector Cl_0
   initialize to Keep
   set CLK to "0"
end vector

vector Cl_1
   initialize to Keep
   set CLK to "1"
end vector

vector Cl_1_drv
   initialize to Keep_drv
   set CLK to "1"
end vector

vector Cl_0_drv
   initialize to Keep_drv
   set CLK to "0"
end vector

vector Clock
   receive Data
   set Address to "kkk"
   set CLK to "t"
   set Write_Bar to "k"
   set Data to "x"
end vector

vector D0
   initialize to Keep_drv
   set DATA to "0"
end vector

vector D1
   initialize to Keep_drv
   set DATA to "1"
end vector

vector R0
   initialize to Keep
   receive DATA
   set DATA to "0"
end vector

vector R1
   initialize to Keep
   receive DATA
   set DATA to "1"
end vector

vector Write_True
   initialize to Keep_Drv
   set Write_Bar to "0"
end vector

vector Write_False
   initialize to Keep_Drv
   set Write_Bar to "1"
end vector
!*******************************************************************************
!*******************************************************************************
sub Write_Cycle
   repeat 3000 times
      execute Write_True
      execute Clock
   end repeat
end sub

sub Write_Slave_Address

   execute Init      ! Start
   execute D0        ! Bit

   execute Cl_0_drv
   execute D1                   ! ADDRESS MSB
   execute Cl_1_drv
   execute Cl_0_drv
   execute D0                   ! Bit 5
   execute Cl_1_drv
   execute Cl_0_drv
   execute D1                   ! Bit 4
   execute Cl_1_drv
   execute Cl_0_drv
   execute D0                   ! Bit 3
   execute Cl_1_drv
   execute Cl_0_drv
   execute D1                   ! Bit 2  ! MUST MATCH ADDRESS ON CIRCUIT PACK
   execute Cl_1_drv
   execute Cl_0_drv
   execute D0                   ! Bit 1  ! MUST MATCH ADDRESS ON CIRCUIT PACK
   execute Cl_1_drv
   execute Cl_0_drv
   execute D0                   ! Bit 0  ! MUST MATCH ADDRESS ON CIRCUIT PACK
   execute Cl_1_drv

   execute Cl_0_drv
   execute D0                ! write bit
   execute Cl_1_drv

   execute Cl_0
   execute R0                   !ack from slave
   execute Cl_1
end sub

sub Read_Slave_Address

   execute Init      ! Start
   execute D0        ! Bit

   execute Cl_0_drv
   execute D1                   ! ADDRESS MSB
   execute Cl_1_drv
   execute Cl_0_drv
   execute D0                   ! Bit 5
   execute Cl_1_drv
   execute Cl_0_drv
   execute D1                   ! Bit 4
   execute Cl_1_drv
   execute Cl_0_drv
   execute D0                   ! Bit 3
   execute Cl_1_drv
   execute Cl_0_drv
   execute D1                   ! Bit 2  ! MUST MATCH ADDRESS ON CIRCUIT PACK
   execute Cl_1_drv
   execute Cl_0_drv
   execute D0                   ! Bit 1  ! MUST MATCH ADDRESS ON CIRCUIT PACK
   execute Cl_1_drv
   execute Cl_0_drv
   execute D0                   ! Bit 0  ! MUST MATCH ADDRESS ON CIRCUIT PACK
   execute Cl_1_drv

   execute Cl_0_drv
   execute D1                ! read bit
   execute Cl_1_drv

   execute Cl_0
   execute R0                   !ack from slave
   execute Cl_1
end sub

sub Word_Address(WA7,WA6,WA5,WA4,WA3,WA2,WA1,WA0)
   execute Cl_0_drv
   execute WA7
   execute Cl_1_drv
   execute Cl_0_drv
   execute WA6
   execute Cl_1_drv
   execute Cl_0_drv
   execute WA5
   execute Cl_1_drv
   execute Cl_0_drv
   execute WA4
   execute Cl_1_drv
   execute Cl_0_drv
   execute WA3
   execute Cl_1_drv
   execute Cl_0_drv
   execute WA2
   execute Cl_1_drv
   execute Cl_0_drv
   execute WA1
   execute Cl_1_drv
   execute Cl_0_drv
   execute WA0
   execute Cl_1_drv
   execute Cl_0
   execute R0                  !ack from slave
   execute Cl_1
   execute Cl_0
end sub

sub Write_Data(WD7,WD6,WD5,WD4,WD3,WD2,WD1,WD0)

   execute Cl_0_Drv
   execute WD7     ! Data MSB
   execute Cl_1_Drv
   execute Cl_0_Drv
   execute WD6
   execute Cl_1_Drv
   execute Cl_0_Drv
   execute WD5
   execute Cl_1_Drv
   execute Cl_0_Drv
   execute WD4
   execute Cl_1_Drv
   execute Cl_0_Drv
   execute WD3
   execute Cl_1_Drv
   execute Cl_0_Drv
   execute WD2
   execute Cl_1_Drv
   execute Cl_0_Drv
   execute WD1
   execute Cl_1_Drv
   execute Cl_0_Drv
   execute WD0      ! Data LSB
   execute Cl_1_Drv

   execute Cl_0
   execute R0                  !ack from slave
   execute Cl_1
   execute Cl_0
end sub

sub Read_Data(RD7,RD6,RD5,RD4,RD3,RD2,RD1,RD0)
   execute Cl_0
   execute RD7     ! Data MSB
   execute Cl_1
   execute Cl_0
   execute RD6
   execute Cl_1
   execute Cl_0
   execute RD5
   execute Cl_1
   execute Cl_0
   execute RD4
   execute Cl_1
   execute Cl_0
   execute RD3
   execute Cl_1
   execute Cl_0
   execute RD2
   execute Cl_1
   execute Cl_0
   execute RD1
   execute Cl_1
   execute Cl_0
   execute RD0
   execute Cl_1
   execute Cl_0
   execute D0         ! ack from test set MASTER
   execute Cl_1_drv
end sub

sub Page_Write (WB7,WB6,WB5,WB4,WB3,WB2,WB1,WB0)

   ! Write Slave Address
   execute Init      ! Start
   execute D0        ! Bit

   execute Cl_0_drv
   execute D1                   ! ADDRESS MSB
   execute Cl_1_drv
   execute Cl_0_drv
   execute D0                   ! Bit 5
   execute Cl_1_drv
   execute Cl_0_drv
   execute D1                   ! Bit 4
   execute Cl_1_drv
   execute Cl_0_drv
   execute D0                   ! Bit 3
   execute Cl_1_drv
   execute Cl_0_drv
   execute D1                   ! Bit 2  ! MUST MATCH ADDRESS ON CIRCUIT PACK
   execute Cl_1_drv
   execute Cl_0_drv
   execute D0                   ! Bit 1  ! MUST MATCH ADDRESS ON CIRCUIT PACK
   execute Cl_1_drv
   execute Cl_0_drv
   execute D0                   ! Bit 0  ! MUST MATCH ADDRESS ON CIRCUIT PACK
   execute Cl_1_drv

   execute Cl_0_drv
   execute D0                ! write bit
   execute Cl_1_drv

   execute Cl_0
   execute R0                   !ack from slave
   execute Cl_1

   ! Word_Address

   execute Cl_0_drv
   execute WB7
   execute Cl_1_drv
   execute Cl_0_drv
   execute WB6
   execute Cl_1_drv
   execute Cl_0_drv
   execute WB5
   execute Cl_1_drv
   execute Cl_0_drv
   execute WB4
   execute Cl_1_drv
   execute Cl_0_drv
   execute WB3
   execute Cl_1_drv
   execute Cl_0_drv
   execute WB2
   execute Cl_1_drv
   execute Cl_0_drv
   execute WB1
   execute Cl_1_drv
   execute Cl_0_drv
   execute WB0
   execute Cl_1_drv
   execute Cl_0
   execute R0                  !ack from slave
   execute Cl_1
   execute Cl_0

   ! Write_Data_55

   execute Cl_0_Drv
   execute D0      ! Data MSB
   execute Cl_1_Drv
   execute Cl_0_Drv
   execute D1
   execute Cl_1_Drv
   execute Cl_0_Drv
   execute D0
   execute Cl_1_Drv
   execute Cl_0_Drv
   execute D1
   execute Cl_1_Drv
   execute Cl_0_Drv
   execute D0
   execute Cl_1_Drv
   execute Cl_0_Drv
   execute D1
   execute Cl_1_Drv
   execute Cl_0_Drv
   execute D0
   execute Cl_1_Drv
   execute Cl_0_Drv
   execute D1       ! Data LSB
   execute Cl_1_Drv

   execute Cl_0
   execute R0                  !ack from slave
   execute Cl_1
   execute Cl_0

   ! Write_Data_AA

   execute Cl_0_Drv
   execute D1      ! Data MSB
   execute Cl_1_Drv
   execute Cl_0_Drv
   execute D0
   execute Cl_1_Drv
   execute Cl_0_Drv
   execute D1
   execute Cl_1_Drv
   execute Cl_0_Drv
   execute D0
   execute Cl_1_Drv
   execute Cl_0_Drv
   execute D1
   execute Cl_1_Drv
   execute Cl_0_Drv
   execute D0
   execute Cl_1_Drv
   execute Cl_0_Drv
   execute D1
   execute Cl_1_Drv
   execute Cl_0_Drv
   execute D0       ! Data LSB
   execute Cl_1_Drv

   execute Cl_0
   execute R0                  !ack from slave
   execute Cl_1
   execute Cl_0

   ! Write_Data_55

   execute Cl_0_Drv
   execute D0      ! Data MSB
   execute Cl_1_Drv
   execute Cl_0_Drv
   execute D1
   execute Cl_1_Drv
   execute Cl_0_Drv
   execute D0
   execute Cl_1_Drv
   execute Cl_0_Drv
   execute D1
   execute Cl_1_Drv
   execute Cl_0_Drv
   execute D0
   execute Cl_1_Drv
   execute Cl_0_Drv
   execute D1
   execute Cl_1_Drv
   execute Cl_0_Drv
   execute D0
   execute Cl_1_Drv
   execute Cl_0_Drv
   execute D1       ! Data LSB
   execute Cl_1_Drv

   execute Cl_0
   execute R0                  !ack from slave
   execute Cl_1
   execute Cl_0

   ! Write_Data_AA

   execute Cl_0_Drv
   execute D1      ! Data MSB
   execute Cl_1_Drv
   execute Cl_0_Drv
   execute D0
   execute Cl_1_Drv
   execute Cl_0_Drv
   execute D1
   execute Cl_1_Drv
   execute Cl_0_Drv
   execute D0
   execute Cl_1_Drv
   execute Cl_0_Drv
   execute D1
   execute Cl_1_Drv
   execute Cl_0_Drv
   execute D0
   execute Cl_1_Drv
   execute Cl_0_Drv
   execute D1
   execute Cl_1_Drv
   execute Cl_0_Drv
   execute D0       ! Data LSB
   execute Cl_1_Drv

   execute Cl_0
   execute R0                  !ack from slave
   execute Cl_1
   execute Cl_0

   execute Cl_0_Drv          ! stop bit
   execute D0                !
   execute Cl_1_Drv          !
   execute D1                !
   execute Cl_1_Drv          !

   repeat 3000 times         ! begin Erase/Write Cycle
      execute Write_True
      execute Clock
   end repeat

end sub
!*******************************************************************************
!*******************************************************************************
unit "Page Write Test"

   execute Write_True        ! enable Write operations

   call Write_Slave_Address
!@ call Word_Address (D1,D0,D0,D0,D0,D0,D0,D0)   ! Address_80

!@ call Write_Data (D0,D1,D0,D1,D0,D1,D0,D1)     ! Data_55
!@ call Write_Data (D1,D0,D1,D0,D1,D0,D1,D0)     ! Data_AA
!@ call Write_Data (D0,D1,D0,D1,D0,D1,D0,D1)     ! Data_55
!@ call Write_Data (D1,D0,D1,D0,D1,D0,D1,D0)     ! Data_AA

!@ execute Cl_0_Drv          ! stop bit
!@ execute D0                !
!@ execute Cl_1_Drv          !
!@ execute D1                !
!@ execute Cl_1_Drv          !

!@ call Write_Cycle          ! wait for erase/write cycle

!@ call Write_Slave_Address
!@ call Word_Address (D1,D0,D0,D0,D0,D1,D0,D0)   ! Address_84

!@ call Write_Data (D0,D1,D0,D1,D0,D1,D0,D1)     ! Data_55
!@ call Write_Data (D1,D0,D1,D0,D1,D0,D1,D0)     ! Data_AA
!@ call Write_Data (D0,D1,D0,D1,D0,D1,D0,D1)     ! Data_55
!@ call Write_Data (D1,D0,D1,D0,D1,D0,D1,D0)     ! Data_AA

!@ execute Cl_0_Drv          ! stop bit
!@ execute D0                !
!@ execute Cl_1_Drv          !
!@ execute D1                !
!@ execute Cl_1_Drv          !

!@ call Write_Cycle          ! wait for erase/write cycle

end unit

!@unit "Sequential Read Test"

!@ execute Write_False       ! disable Write operations

!@ call Write_Slave_Address
!@ call Word_Address (D1,D0,D0,D0,D0,D0,D0,D0)   ! Address_80
!@ call Read_Slave_Address

!@ call Read_Data (R0,R1,R0,R1,R0,R1,R0,R1)      ! Data_55
!@ call Read_Data (R1,R0,R1,R0,R1,R0,R1,R0)      ! Data_AA
!@ call Read_Data (R0,R1,R0,R1,R0,R1,R0,R1)      ! Data_55
!@ call Read_Data (R1,R0,R1,R0,R1,R0,R1,R0)      ! Data_AA
!@ call Read_Data (R0,R1,R0,R1,R0,R1,R0,R1)      ! Data_55
!@ call Read_Data (R1,R0,R1,R0,R1,R0,R1,R0)      ! Data_AA
!@ call Read_Data (R0,R1,R0,R1,R0,R1,R0,R1)      ! Data_55
!@ call Read_Data (R1,R0,R1,R0,R1,R0,R1,R0)      ! Data_AA

!@ execute Cl_0_Drv          ! stop bit
!@ execute D0                !
!@ execute Cl_1_Drv          !
!@ execute D1                !
!@ execute Cl_1_Drv          !

!@end unit

!@unit "Byte Write Test"

!@  execute Write_True        ! enable Write operations

!@ call Write_Slave_Address
!@ call Word_Address (D1,D0,D0,D0,D0,D0,D0,D0)   ! Address_80
!@ call Write_Data (D0,D0,D0,D0,D0,D0,D0,D0)     ! Data_00

!@ execute Cl_0_Drv          ! stop bit
!@ execute D0                !
!@ execute Cl_1_Drv          !
!@ execute D1                !
!@ execute Cl_1_Drv          !

!@ call Write_Cycle          ! wait for erase/write cycle
!@ call Write_Slave_Address
!@ call Word_Address (D1,D0,D0,D0,D0,D0,D0,D1)   ! Address_81
!@ call Write_Data (D0,D0,D0,D0,D0,D0,D0,D1)     ! Data_01

!@ execute Cl_0_Drv          ! stop bit
!@ execute D0                !
!@ execute Cl_1_Drv          !
!@ execute D1                !
!@ execute Cl_1_Drv          !

!@ call Write_Cycle          ! wait for erase/write cycle

!@ call Write_Slave_Address
!@ call Word_Address (D1,D0,D0,D0,D0,D0,D1,D0)   ! Address_82
!@ call Write_Data (D0,D0,D0,D0,D0,D0,D1,D0)     ! Data_02

!@ execute Cl_0_Drv          ! stop bit
!@ execute D0                !
!@ execute Cl_1_Drv          !
!@ execute D1                !
!@ execute Cl_1_Drv          !

!@ call Write_Cycle          ! wait for erase/write cycle

!@ call Write_Slave_Address
!@ call Word_Address (D1,D0,D0,D0,D0,D1,D0,D0)   ! Address_84
!@ call Write_Data (D0,D0,D0,D0,D0,D1,D0,D0)     ! Data_04

!@ execute Cl_0_Drv          ! stop bit
!@ execute D0                !
!@ execute Cl_1_Drv          !
!@ execute D1                !
!@ execute Cl_1_Drv          !

!@ call Write_Cycle          ! wait for erase/write cycle

!@ call Write_Slave_Address
!@ call Word_Address (D1,D0,D0,D0,D1,D0,D0,D0)   ! Address_88
!@ call Write_Data (D0,D0,D0,D0,D1,D0,D0,D0)     ! Data_08

!@ execute Cl_0_Drv          ! stop bit
!@ execute D0                !
!@ execute Cl_1_Drv          !
!@ execute D1                !
!@ execute Cl_1_Drv          !

!@ call Write_Cycle          ! wait for erase/write cycle

!@ call Write_Slave_Address
!@ call Word_Address (D1,D0,D0,D1,D0,D0,D0,D0)   ! Address_90
!@ call Write_Data (D0,D0,D0,D1,D0,D0,D0,D0)     ! Data_10

!@ execute Cl_0_Drv          ! stop bit
!@ execute D0                !
!@ execute Cl_1_Drv          !
!@ execute D1                !
!@ execute Cl_1_Drv          !

!@ call Write_Cycle          ! wait for erase/write cycle

!@ call Write_Slave_Address
!@ call Word_Address (D1,D0,D1,D0,D0,D0,D0,D0)   ! Address_A0
!@ call Write_Data (D0,D0,D1,D0,D0,D0,D0,D0)     ! Data_20

!@ execute Cl_0_Drv          ! stop bit
!@ execute D0                !
!@ execute Cl_1_Drv          !
!@ execute D1                !
!@ execute Cl_1_Drv          !

!@ call Write_Cycle          ! wait for erase/write cycle

!@ call Write_Slave_Address
!@ call Word_Address (D1,D1,D0,D0,D0,D0,D0,D0)   ! Address_C0
!@ call Write_Data (D0,D1,D0,D0,D0,D0,D0,D0)     ! Data_40

!@ execute Cl_0_Drv          ! stop bit
!@ execute D0                !
!@ execute Cl_1_Drv          !
!@ execute D1                !
!@ execute Cl_1_Drv          !

!@ call Write_Cycle          ! wait for erase/write cycle

!@ call Write_Slave_Address
!@ call Word_Address (D1,D1,D1,D1,D1,D1,D1,D1)   ! Address_FF
!@ call Write_Data (D1,D1,D1,D1,D1,D1,D1,D1)     ! Data_FF

!@ execute Cl_0_Drv          ! stop bit
!@ execute D0                !
!@ execute Cl_1_Drv          !
!@ execute D1                !
!@ execute Cl_1_Drv          !

!@ call Write_Cycle          ! wait for erase/write cycle

!@end unit

!@unit "Random Read Test"

!@ execute Write_False       ! disable Write operations

!@ call Write_Slave_Address
!@ call Word_Address (D1,D0,D0,D0,D0,D0,D0,D0)   ! Address_80
!@ call Read_Slave_Address
!@ call Read_Data (R0,R0,R0,R0,R0,R0,R0,R0)      ! Data_00

!@ execute Cl_0_Drv          ! stop bit
!@ execute D0                !
!@ execute Cl_1_Drv          !
!@ execute D1                !
!@ execute Cl_1_Drv          !

!@ call Write_Slave_Address
!@ call Word_Address (D1,D0,D0,D0,D0,D0,D0,D1)   ! Address_81
!@ call Read_Slave_Address
!@ call Read_Data (R0,R0,R0,R0,R0,R0,R0,R1)      ! Data_01

!@ execute Cl_0_Drv          ! stop bit
!@ execute D0                !
!@ execute Cl_1_Drv          !
!@ execute D1                !
!@ execute Cl_1_Drv          !

!@ call Write_Slave_Address
!@ call Word_Address (D1,D0,D0,D0,D0,D0,D1,D0)   ! Address_82
!@ call Read_Slave_Address
!@ call Read_Data (R0,R0,R0,R0,R0,R0,R1,R0)      ! Data_02

!@ execute Cl_0_Drv          ! stop bit
!@ execute D0                !
!@ execute Cl_1_Drv          !
!@ execute D1                !
!@ execute Cl_1_Drv          !

!@ call Write_Slave_Address
!@ call Word_Address (D1,D0,D0,D0,D0,D1,D0,D0)   ! Address_84
!@ call Read_Slave_Address
!@ call Read_Data (R0,R0,R0,R0,R0,R1,R0,R0)      ! Data_04

!@ execute Cl_0_Drv          ! stop bit
!@ execute D0                !
!@ execute Cl_1_Drv          !
!@ execute D1                !
!@ execute Cl_1_Drv          !

!@ call Write_Slave_Address
!@ call Word_Address (D1,D0,D0,D0,D1,D0,D0,D0)   ! Address_88
!@ call Read_Slave_Address
!@ call Read_Data (R0,R0,R0,R0,R1,R0,R0,R0)      ! Data_08

!@ execute Cl_0_Drv          ! stop bit
!@ execute D0                !
!@ execute Cl_1_Drv          !
!@ execute D1                !
!@ execute Cl_1_Drv          !

!@ call Write_Slave_Address
!@ call Word_Address (D1,D0,D0,D1,D0,D0,D0,D0)   ! Address_90
!@ call Read_Slave_Address
!@ call Read_Data (R0,R0,R0,R1,R0,R0,R0,R0)      ! Data_10

!@ execute Cl_0_Drv          ! stop bit
!@ execute D0                !
!@ execute Cl_1_Drv          !
!@ execute D1                !
!@ execute Cl_1_Drv          !

!@ call Write_Slave_Address
!@ call Word_Address (D1,D0,D1,D0,D0,D0,D0,D0)   ! Address_A0
!@ call Read_Slave_Address
!@ call Read_Data (R0,R0,R1,R0,R0,R0,R0,R0)      ! Data_20

!@ execute Cl_0_Drv          ! stop bit
!@ execute D0                !
!@ execute Cl_1_Drv          !
!@ execute D1                !
!@ execute Cl_1_Drv          !

!@ call Write_Slave_Address
!@ call Word_Address (D1,D1,D0,D0,D0,D0,D0,D0)   ! Address_C0
!@ call Read_Slave_Address
!@ call Read_Data (R0,R1,R0,R0,R0,R0,R0,R0)      ! Data_40

!@ execute Cl_0_Drv          ! stop bit
!@ execute D0                !
!@ execute Cl_1_Drv          !
!@ execute D1                !
!@ execute Cl_1_Drv          !

!@ call Write_Slave_Address
!@ call Word_Address (D1,D1,D1,D1,D1,D1,D1,D1)   ! Address_FF
!@ call Read_Slave_Address
!@ call Read_Data (R1,R1,R1,R1,R1,R1,R1,R1)      ! Data_FF

!@ execute Cl_0_Drv          ! stop bit
!@ execute D0                !
!@ execute Cl_1_Drv          !
!@ execute D1                !
!@ execute Cl_1_Drv          !

!@end unit

!*******************************************************************************
!                                 END OF TEST
!*******************************************************************************

