!!!!    6    0    1 1294907709  Vf47e                                         
sequential

vector cycle  10u
receive delay  9u

set terminators to on
assign   VCC         to pins  1, 6
assign   GND         to pins  2

assign   RW          to pins  5
assign   SDA         to pins  4
assign   SCL         to pins  3

family    TTL
power     VCC,GND

inputs         SCL
bidirectional  SDA
nondigital RW

set load on pins 4 to pull up
!==============================================================
vector  Init
   drive SDA
   set   SCL                  to "1"
   set   SDA                  to "1"
end vector

vector  Keep
   drive SDA
   set   SCL                  to "k"
   set   SDA                  to "k"
end vector

vector  DataX_SCL_1
   initialize                 to Keep
   receive  SDA
   set   SCL                  to "1"
   set   SDA                  to "x"
end vector

vector  DataX_SCL_0
   initialize                 to Keep
   receive  SDA
   set   SCL                  to "0"
   set   SDA                  to "x"
end vector

vector  SCL_1
   initialize                 to Keep
   set   SCL                  to "1"
end vector

vector  SCL_0
   initialize                 to Keep
   set   SCL                  to "0"
end vector

vector  SDAw1
   initialize                 to Keep
   set   SDA                  to "1"
end vector

vector  SDAw0
   initialize                 to Keep
   set   SDA                  to "0"
end vector

vector  SDArL
   initialize                 to Keep
   receive  SDA
   set   SDA                  to "0"
end vector

vector  SDArH
   initialize                 to Keep
   receive  SDA
   set   SDA                  to "1"
end vector
!========================================================
sub  Slave_Address(RW)
   execute  Init      !SCL = 1, SDA = 1
   execute  SDAw0     !Start
   execute  SCL_1
   execute  SCL_0


   execute  SDAw0   ! bit 7
   execute  SCL_1
   execute  SCL_0

   execute  SDAw1   ! bit 6
   execute  SCL_1
   execute  SCL_0

   execute  SDAw0   ! bit 5
   execute  SCL_1
   execute  SCL_0

   execute  SDAw1   ! bit 4
   execute  SCL_1
   execute  SCL_0

   execute  SDAw1   ! bit 3
   execute  SCL_1
   execute  SCL_0

   execute  SDAw1   ! bit 2
   execute  SCL_1
   execute  SCL_0

   execute  SDAw0   ! bit 1
   execute  SCL_1
   execute  SCL_0

   execute  RW      ! bit 0      !Write =0, Read = 1
   execute  SCL_1
   execute  SCL_0

   execute  SCL_1
   execute  SDArL
   execute  SCL_1
   execute  SCL_0
end sub

sub  Write (D7,D6,D5,D4,D3,D2,D1,D0)

   execute  D7   ! bit 7
   execute  SCL_1
   execute  SCL_0

   execute  D6   ! bit 6
   execute  SCL_1
   execute  SCL_0

   execute  D5   ! bit 5
   execute  SCL_1
   execute  SCL_0

   execute  D4   ! bit 4
   execute  SCL_1
   execute  SCL_0

   execute  D3   ! bit 3
   execute  SCL_1
   execute  SCL_0

   execute  D2   ! bit 2
   execute  SCL_1
   execute  SCL_0

   execute  D1   ! bit 1
   execute  SCL_1
   execute  SCL_0

   execute  D0   ! bit 0
   execute  SCL_1
   execute  SCL_0

end sub

sub  Read (D7,D6,D5,D4,D3,D2,D1,D0)

   execute  D7   ! bit 7
   execute  DataX_SCL_1
   execute  DataX_SCL_0

   execute  D6   ! bit 6
   execute  DataX_SCL_1
   execute  DataX_SCL_0

   execute  D5   ! bit 5
   execute  DataX_SCL_1
   execute  DataX_SCL_0

   execute  D4   ! bit 4
   execute  DataX_SCL_1
   execute  DataX_SCL_0

   execute  D3   ! bit 3
   execute  DataX_SCL_1
   execute  DataX_SCL_0

   execute  D2   ! bit 2
   execute  DataX_SCL_1
   execute  DataX_SCL_0

   execute  D1   ! bit 1
   execute  DataX_SCL_1
   execute  DataX_SCL_0

   execute  D0   ! bit 0
   execute  DataX_SCL_1
   execute  DataX_SCL_0

end sub
!========================================================

unit "ACK Test"
 execute Init
 call Slave_Address(SDAw0)

 execute  SDAw0       !Stop
 execute  SCL_1
 execute  SDAw1
 execute  SCL_1
 execute  SCL_0
end unit

unit "Write Data"
 execute Init
 call Slave_Address(SDAw0)
 call Write (SDAw0,SDAw0,SDAw0,SDAw0,SDAw0,SDAw0,SDAw0,SDAw0)!Write Add00
 call Write (SDAw0,SDAw1,SDAw0,SDAw1,SDAw0,SDAw1,SDAw0,SDAw1)!Write 55 to Add00
 call Write (SDAw1,SDAw0,SDAw1,SDAw0,SDAw1,SDAw0,SDAw1,SDAw0)!Write AA to Add01
end unit

unit "Read Data"
 execute Init
 call Slave_Address(SDAw1)
 call Write (SDAw0,SDAw0,SDAw0,SDAw0,SDAw0,SDAw0,SDAw0,SDAw0)!Read Addr00
 call Read (SDAw0,SDAw1,SDAw0,SDAw1,SDAw0,SDAw1,SDAw0,SDAw1)!Write 55 to Add00
 call Read (SDAw1,SDAw0,SDAw1,SDAw0,SDAw1,SDAw0,SDAw1,SDAw0)!Write AA to Add01
end unit
!
!  End of test
!
